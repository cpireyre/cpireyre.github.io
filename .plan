Wed Sep 24 12:13:02 EEST 2025
* deploy on github pages
* playable prototype
use BABYLON.PhysicsRaycastResult() for collision?
debug display (fps, keys, pos, etc)
brett victor style live editable state for e.g. colors
tigerbeetle style dependency injection for inputs etc
rich hickey style rule-based engine?

Wed Oct  1 13:35:09 EEST 2025
* better collision logic
* use emissiveColor and mirrorMaterial
* live edit object color
* display current score
pop-up editor would be cooler and less intrusive
bounce physics still fake
code a mess
mirrorMaterial performance considerations?
save color settings etc. to local storage
slider for ball speed (good for debug)
accelerate during game
try some post processing shaders?

Sat Oct 25 17:48:15 EEST 2025
* (added state machine and stuff before)
* extracted ui and render code into es6 modules
* broke state transitions in the process
* moved files into /lib and /src

Mon Oct 27 15:21:12 EET 2025:
* fixed start button state injection mess, kind of
* avoided git nonsense with the PR
don't know if i like how the modules are factored
maybe update should take or return events?
next thing is PR for the refactor
next next thing is PR for the backend integration
want to do best of 3 rather than best of 1 maybe?

Wed Oct 29 08:58:26 EET 2025
paddles should move in waiting state
still need to fix serve
implement bo3
dark mode should literally dim the lights
* make serve more predictable (reset z, alternate x)
* let paddles move in waiting state
be cool if ball accelerated slowly at start of round
